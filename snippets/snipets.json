{
    "bit_array":{
        "prefix": "pcr_bit_array",
        "body": [
            "typedef vector<ull> bit_array;",
            "void initBitArray(bit_array &a, int size) {",
            "    int len = (size / (sizeof(ull) * 8)) + (size % (sizeof(ull) * 8) == 0 ? 0 : 1);",
            "    a.resize(len, 0);",
            "}",
            "void flushBitArray(bit_array &a, bool v) {",
            "    fill(a.begin(), a.end(), (v ? (ull)-1 : 0));",
            "}",
            "void setBit(bit_array &a, int pos, bool v) {",
            "    int idx = pos / (sizeof(ull) * 8), offset = pos % (sizeof(ull) * 8);",
            "    if(v == 1) a[idx] |= ((ull)1) << offset;",
            "    else a[idx] &= ~(((ull)1) << offset);",
            "}",
            "bool getBit(bit_array &a, int pos) {",
            "    int idx = pos / (sizeof(ull) * 8), offset = pos % (sizeof(ull) * 8);",
            "    return (a[idx] & (((ull)1) << offset)) > 0;",
            "}",
            "int getSize(bit_array &a) {",
            "    return a.size() * sizeof(ull) * 8;",
            "}"
            ]
    },

    "fenwick":{
        "prefix": "pcr_fenwick",
        "body": [
            "const int MAX_FT_SIZE = 1 << 15;",
            "ll ft[MAX_FT_SIZE];",
            "",
            "ll getV(int i) {",
            "	ll res = ft[i];",
            "	while((i -= lsbs(i)) > 0) {",
            "		res += ft[i];",
            "	}",
            "	return res;",
            "}",
            "",
            "void setV(int i, ll value) {",
            "	while(i < MAX_FT_SIZE) {",
            "		ft[i] += value;",
            "		i += lsbs(i);",
            "	}	",
            "}",
            "",
            "ll getRange(int l, int r) {",
            "	return getV(r) - getV(l - 1);",
            "}"
            ]
    },

    "link_cut_tree":{
        "prefix": "pcr_link_cut_tree",
        "body": [
            "typedef struct node {",
            "    //left child, right child, pref. path parent, aux parent",
            "    node *l = NULL, *r=NULL, *p = NULL, *pp=NULL;",
            "    //indicates whether tree needs to be flipped (childs swaped)",
            "    bool flip = false;",
            "    //path aggr values: for whole aux. path [pav], for node [nav]",
            "    ll pav = 0, nav = 1;",
            "    ll val;",
            "} node;",
            "",
            "//update data (min/max/sum edge/node usw), called iff new childs",
            "void update(node *v) {",
            "    //set v->pav based on operation",
            "    v->pav = v->nav + (v->l != NULL ? v->l->pav : 0) + (v->r != NULL ? v->r->pav: 0);",
            "}",
            "",
            "//normalize a node if indicated",
            "void normalize(node *u) {",
            "    if(!u->flip) return;",
            "",
            "    //swap childs",
            "    node *t = u->l;",
            "    u->l = u->r;",
            "    u->r = t;",
            "",
            "    //update revert indicator",
            "    if(u->l != NULL) u->l->flip = !u->l->flip;",
            "    if(u->r != NULL) u->r->flip = !u->r->flip;",
            "",
            "    u->flip = false;",
            "}",
            "",
            "//rotate tree such that x moves one layer up (assumption: parent exists)",
            "void rotate(node *u) {",
            "    node *up = u->p, *upp = up->p;",
            "",
            "    //Case 1.1",
            "    if(up->l == u) {",
            "        node *B = u->r;",
            "        u->r = up, u->p = up->p;",
            "        up->p = u, up->l = B;",
            "        if(B != NULL) B->p = up;",
            "    }",
            "    //CASE 1.2",
            "    else {",
            "        node *B = u->l;",
            "        u->l = up, u->p = up->p;",
            "        up->r = B, up->p = u;",
            "        if(B != NULL) B->p = up;",
            "    }",
            "",
            "    //update upp's pointers, if exists",
            "    if(upp != NULL) {",
            "        if(upp->l == up) upp->l = u;",
            "        else upp->r = u;",
            "    }",
            "",
            "    //update path aggr. values",
            "    update(up);",
            "    update(u);",
            "}",
            "",
            "//rotate pref path in aux tree such that v is root",
            "void splay(node *v) {",
            "    //if v is already root of aux tree, normalize and return",
            "    if(v->p == NULL) {",
            "        normalize(v);",
            "        return;",
            "    };",
            "",
            "    node *u = v, *up = NULL, *upp = NULL;",
            "    while(u->p != NULL) {",
            "        up = u->p, upp = up->p;",
            "",
            "        //normalize all necessary components before rotating",
            "        if(upp != NULL) normalize(upp);",
            "        normalize(up);",
            "        normalize(u);",
            "",
            "        //if at least 2 layers above",
            "        if(upp != NULL) {",
            "            //zig-zig",
            "            if((up->l == u) == (upp->l == up)) rotate(up);",
            "            //zig-zag",
            "            else rotate(u);",
            "        }",
            "        //last step of current rotation",
            "        rotate(u);",
            "    }",
            "",
            "    //set old root",
            "    node *r = (upp == NULL ? up : upp);",
            "",
            "    //update pointers (attach aux tree of w to v)",
            "    v->p = NULL;",
            "    v->pp = r->pp;",
            "    r->pp = NULL;",
            "}",
            "",
            "//restructures the three containing v based on new pref. path",
            "node *access(node *v) {",
            "    //make v the root of the aux. tree",
            "    splay(v);",
            "",
            "    //v is beginning of preffered path => remove preffered child",
            "    if(v->r != NULL) {",
            "        v->r->pp = v;",
            "        v->r->p = NULL;",
            "    }",
            "    v->r = NULL;",
            "",
            "    node *u = v;",
            "    //while not at root of represented tree",
            "    while(u->pp != NULL) {",
            "        //get node curr. aux. tree is connected to",
            "        node *w = u->pp;",
            "        //make node to root of new aux. tree",
            "        splay(w);",
            "        //switch w's pref. chil",
            "        if(w->r != NULL) {",
            "            w->r->pp = w;",
            "            w->r->p = NULL;",
            "        }",
            "        w->r = u;",
            "        u->p = w;",
            "        u->pp = NULL;",
            "        u=w;",
            "    }",
            "",
            "    //one more splay of v to make v he root of the new aux. tree",
            "    splay(v);",
            "    //update v if there was no update process at all (i.e. v was last access call)",
            "    update(v);",
            "",
            "    //return first node of new pref. path in the old highest aux tree",
            "    return u;",
            "}",
            "",
            "//makes v the root of its repr. tree",
            "void makeRoot(node *v) {",
            "    //update aux trees",
            "    access(v);",
            "    //rotate childs (make v highest element in repr. tree)",
            "    v->flip = !v->flip;",
            "}",
            "",
            "node *findRoot(node *v) {",
            "    //update aux trees",
            "    access(v);",
            "    //find root(by constraints most left node (highest node))",
            "    while(v->l != NULL) v = v->l;",
            "    //make r root of aux tree s.t. will be found faster next time",
            "    access(v);",
            "",
            "    return v;",
            "}",
            "",
            "//cut subtree with node v",
            "void cut(node *v) {",
            "    //update aux trees",
            "    access(v);",
            "",
            "    //to cut everything above v just remove its left child, update path-pointer",
            "    if(v->l != NULL) {",
            "        v->l->p = NULL;",
            "        v->l = NULL;",
            "    }",
            "}",
            "",
            "//cut edge between u and v (if exists) [makes u root as well as v]",
            "void cut(node *u, node *v) {",
            "    //make u root and access v",
            "    makeRoot(u);",
            "    access(v);",
            "",
            "    //if there was no edge between u and v, return",
            "    if(v->l != u) return;",
            "    //else cut nodes",
            "    v->l = NULL;",
            "    u->p = NULL;",
            "}",
            "",
            "//(links u to v (makes u root)",
            "void link(node *u, node *v) {",
            "    //make u root, access v",
            "    makeRoot(u);",
            "    access(v);",
            "    //set pointer",
            "    u->pp = v;",
            "    //update aux trees",
            "    access(u);",
            "}",
            "",
            "node *lca(node *u, node *v) {",
            "    //make u root of aux trees",
            "    access(u);",
            "    //lca is the first node of the path (v to root of tree) which was in the old root aux. tree",
            "    return access(v);",
            "}",
            "",
            "//calculates the path aggr. value between node v and u (makes v root or repr. tree)",
            "ll calcPav(node *v, node *u) {",
            "    makeRoot(v);",
            "    access(u);",
            "    return u->pav;",
            "}"
            ]
    },

    "segment_tree":{
        "prefix": "pcr_segment_tree",
        "body": [
            "int base;",
            "vector<int> seg_tree;",
            "",
            "//O(n)",
            "void initSeg(vector<int> &data) {",
            "	base = pow(2, (int)ceil(log2(data.size())) + 1) / 2;",
            "	seg_tree = vector<int>(2 * base, MAX_INT);",
            "	for(int i = base + data.size() - 1; i > 0; i--) {",
            "		if(i >= base) seg_tree[i] = data[i - base];",
            "		else {",
            "			seg_tree[i] = min(seg_tree[2*i], seg_tree[2*i+1]);",
            "		}",
            "	}",
            "}",
            "",
            "int _getMin(int idx, int pos, int len, int l, int r) {",
            "	if(pos == l && len == r - l) return seg_tree[idx];",
            "	",
            "	len >>= 1;",
            "	int mm = MAX_INT;",
            "	if(pos + len > l) mm = min(mm, _getMin(2*idx, pos, len, l, min(r, pos + len)));",
            "	if(pos + len < r) mm = min(mm, _getMin(2*idx+1, pos + len, len,  max(l, pos + len), r));",
            "	return mm;",
            "}",
            "",
            "//inclusive l, exclusive r",
            "//O(log(n))",
            "int getMin(int l, int r) {",
            "	if(l >= r) return MAX_INT;",
            "	else {",
            "		return _getMin(1, 0, base, l, r);",
            "	}",
            "}"
            ]
    },

    "flip_tracking":{
        "prefix": "pcr_flip_tracking",
        "body": [
            "int base;",
            "vector<pii> seg_tree;",
            "",
            "//O(n)",
            "void initSeg(int size) {",
            "	base = pow(2, (int)ceil(log2(size	)) + 1) / 2;",
            "	seg_tree = vector<pii>(2 * base, {0, 0});",
            "}",
            "",
            "",
            "int _getSum(int idx, int pos, int len, int l, int r, int rot) {",
            "	if(pos == l && len == r - l) {",
            "		int mm = seg_tree[idx].first;",
            "		if(rot % 2 == 1) mm = len - mm;",
            "		return mm;",
            "	}",
            "	",
            "	rot = (rot + seg_tree[idx].second) % 2;",
            "	len >>= 1;",
            "	int mm = 0;",
            "	if(l < pos + len) mm +=  _getSum(2*idx, pos, len, l, min(r, pos + len), rot);",
            "	if(pos + len < r) mm += _getSum(2*idx+1, pos + len, len,  max(l, pos + len), r, rot);",
            "	",
            "	return mm;",
            "}",
            "",
            "void _flip(int idx, int pos, int len, int l, int r, int rot) {",
            "	if(pos == l && len == r - l) {",
            "		if(rot) {",
            "			//cout << l << " to " << (r-1)	 << " switch " << endl;",
            "			seg_tree[idx].first = len - seg_tree[idx].first;",
            "			seg_tree[idx].second = (seg_tree[idx].second + 1) % 2;",
            "		}",
            "		return;",
            "	}",
            "	",
            "	len >>= 1;",
            "	",
            "	_flip(2*idx, 0, len, 0, len, seg_tree[idx].second);",
            "	_flip(2*idx+1, 0, len, 0, len, seg_tree[idx].second);",
            "	",
            "",
            "	if(l < pos + len) _flip(2*idx, pos, len, l, min(r, pos + len), 1);",
            "	if(pos + len < r) _flip(2*idx+1, pos + len, len,  max(l, pos + len), r, 1);",
            "	",
            "	seg_tree[idx].second = 0;",
            "	seg_tree[idx].first = seg_tree[2*idx].first + seg_tree[2*idx+1].first;",
            "}",
            "",
            "//inclusive l, exclusive r",
            "//O(log(n))",
            "int getSum(int l, int r) {",
            "	if(l >= r) return 0;",
            "	else {",
            "		return _getSum(1, 0, base, l, r, 0);",
            "	}",
            "}",
            "",
            "//inclusive l, exclusive r",
            "//O(log(n))",
            "void flip(int l, int r) {",
            "	if(l < r) {",
            "		_flip(1, 0, base, l, r, 1);",
            "	}",
            "}"
            ]
    },

    "sparce_table":{
        "prefix": "pcr_sparce_table",
        "body": [
            "const int RMQ_SIZE = 1000;",
            "ll data[RMQ_SIZE], rmq[((int)log2(RMQ_SIZE)) + 1][RMQ_SIZE];",
            "",
            "//O(n*log(n))",
            "void initRMQ() {",
            "	memset(rmq, 0, sizeof(rmq));",
            "	for(int i = 0, l = 1, ol = 1; l <= RMQ_SIZE; i++, ol = l, l <<= 1) {	",
            "		for(int k = 0; k + l <= RMQ_SIZE; k++) {",
            "			if(l == 1) rmq[i][k] = k;",
            "			else rmq[i][k] = (data[rmq[i-1][k]]  <= data[rmq[i-1][k+ol]] ? rmq[i-1][k] : rmq[i-1][k+ol]);",
            "		}",
            "	}",
            "}",
            "",
            "//returns index of minimum of [a, b)",
            "//O(1)",
            "ll queryRMQ(int a, int b) {",
            "	if(a >= b) return b;",
            "	int l = (int)log2(b-a);",
            "	b = b - (1 << l);",
            "	return (data[rmq[l][a]] <= data[rmq[l][b]] ? rmq[l][a] : rmq[l][b]);",
            "}"
            ]
    },

    "union_find":{
        "prefix": "pcr_union_find",
        "body": [
            "const int MAX_UF_SIZE = 1000010;",
            "ll uf[MAX_UF_SIZE]; //init: -1",
            "",
            "//returns index of the representative of the set containing idx",
            "//O(alpha(n)) ~ const",
            "int find(int idx) {",
            "	return (uf[idx] < 0 ? idx : (uf[idx] = find(uf[idx])));",
            "}",
            "",
            "",
            "//unites the set containing a with the set containing b",
            "//O(alpha(n)) ~ const",
            "void unite(int a, int b) {",
            "	a = find(a), b = find(b);",
            "	",
            "	if(a == b) return;",
            "	",
            "	if(-uf[a] < -uf[b]) uf[a] = b;",
            "	else if(-uf[a] > -uf[b]) uf[b] = a;",
            "	else {",
            "		uf[b] = a;",
            "		uf[a]--;",
            "	}",
            "}"
            ]
    },

    "usefull":{
        "prefix": "pcr_usefull",
        "body": [
            " //USE TO GET TYPE OF VAR _",
            "decltype(_);",
            " //USE TO MAKE SET WITH COSTUM COMP. FUNC.",
            "set<point2, decltype(comp)> set1(comp);"
            ]
    },

    "lsbs":{
        "prefix": "pcr_lsbs",
        "body": [
            "int lsbs(int x) {",
            "	return (x & (-x));",
            "}"
            ]
    },

    "frame":{
        "prefix": "pcr_frame",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "#define pb push_back",
            "",
            "using namespace std;",
            "",
            "typedef long long ll;",
            "typedef unsigned long long ull;",
            "typedef pair<int, int> pii;",
            "typedef pair<ll, ll> pll;",
            "typedef ll (*MY_FUNC)(ll x, ll y);",
            "",
            "const ll MAX_LL = 1LL << 62; //(1 << 63) - 1",
            "const int MAX_INT = (int)((1LL << 31) - 1);",
            "const double PI = acos(-1);",
            "const double EPS = 0.0000001L;",
            "const ll MOD = 1000000007;",
            "",
            "",
            "//---------------------------------------------------------------------------------------------",
            "//---------------------------------------------------------------------------------------------",
            "",
            "",
            "void solve() {",
            "",
            "}",
            "",
            "int main() {",
            "	//USE FOR FAST IO",
            "	ios::sync_with_stdio(false);",
            "	solve();",
            "	return 0;",
            "}"
            ]
    },

    "mult_mod":{
        "prefix": "pcr_mult_mod",
        "body": [
            "//0<=a,b <=n and n <= MAX(ll)/2",
            "//O(logn)",
            "ll mult_mod(ll a, ll b, ll n) {",
            "	if(a == 0 || b == 0) return 0;",
            "	if(b == 1) return a % n;",
            "	",
            "	if(b % 2 == 1) return (a + mult_mod(a, b-1, n)) % n;",
            "	else return mult_mod((a + a) % n, b / 2, n);",
            "}"
            ]
    },

    "pow_mod":{
        "prefix": "pcr_pow_mod",
        "body": [
            "//0<=a,b<=n and n <= MAX(ll)/2",
            "//O(logn^2)",
            "ll pow_mod(ll a, ll b, ll n) {",
            "	if(b == 0) return 1;",
            "	if(b == 1) return a % n;",
            "	",
            "	if(b % 2 == 1) return mult_mod(pow_mod(a, b-1, n), a, n);",
            "	else return pow_mod(mult_mod(a, a, n), b / 2, n);",
            "}"
            ]
    },

    "optimize":{
        "prefix": "pcr_optimize",
        "body": [
            "//USE FOR FAST IO",
            "ios::sync_with_stdio(false);",
            "//UNTIES CIN AND COUT (IF INTERACTIVE: USE FLUS EXPLICITLY)",
            "cin.tie(NULL);",
            "cout.flush();",
            "//USE FOR PRECISE OUTPUT",
            "setprecision(10); fixed;"
            ]
    },

    "scanf_printf":{
        "prefix": "pcr_scanf_printf",
        "body": [
            "//reads from std input",
            "scanf(str,&v1,&v2);",
            "//writes on std output",
            "printf(str,v1,v2);"
            ]
    },

    "write_file":{
        "prefix": "pcr_write_file",
        "body": [
            "ofstream myfile;",
            "myfile.open("42.in");",
            "myfile << "blabliblablub"",
            "myfile.close();"
            ]
    },

    "area_of_polygon":{
        "prefix": "pcr_area_of_polygon",
        "body": [
            "//polygon does not cut itself, startpoint != endpoint",
            "double areaOfPolygon(vector<point2> &pol) {",
            "	double res = 0; int n = pol.size();",
            "	for(int i = 0; i < n; i++) {",
            "		res += X2(pol[i], pol[(i+1) % n]);",
            "	}",
            "	return abs((res / 2.0L));",
            "}"
            ]
    },

    "ccw":{
        "prefix": "pcr_ccw",
        "body": [
            "//p1 -> p2 -> p3",
            "//ccw(=counter clockwise) > 0",
            "//colinear == 0",
            "//cw < 0",
            "ll ccw(point2 p1, point2 p2, point2 p3) {",
            "    return X2(p2-p1, p3-p1);",
            "}"
            ]
    },

    "cross_product":{
        "prefix": "pcr_cross_product",
        "body": [
            "//cross product in 2d is the z coordinate of the cross product of the vectors in 3d with z = 0",
            "ll X2(point2 p1, point2 p2) {",
            "	return (p1.x * p2.y) - (p1.y * p2.x);",
            "}",
            "",
            "ll X3(point3 p1, point3 p2) {",
            "	point3 res;",
            "	res.x = (p1.y * p2.z) - (p1.z * p2.y);",
            "	res.y = (p1.z * p2.x) - (p1.x * p2.z);",
            "	res.z = (p1.x * p2.y) - (p1.y * p2.x);",
            "	return res;",
            "}"
            ]
    },

    "euclidean_distance":{
        "prefix": "pcr_euclidean_distance",
        "body": [
            "//returns the square of the eucl. dist",
            "double dist2(double x1, double y1, double x2, double y2) {",
            "    return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);",
            "}",
            "//returns the eucl dist",
            "double dist(double x1, double y1, double x2, double y2) {",
            "    return sqrt(dist2(x1, y1, x2, y2));",
            "}"
            ]
    },

    "geometry_types":{
        "prefix": "pcr_geometry_types",
        "body": [
            "typedef struct { ll x, y; } point2;",
            "point2 operator+(const point2 &p1, const point2 &p2) {",
            "	return (point2 {p1.x + p2.x, p1.y + p2.y});",
            "} ",
            "point2 operator-(const point2 &p1, const point2 &p2) {",
            "	return (point2 {p1.x - p2.x, p1.y - p2.y});",
            "}",
            "",
            "typedef struct { ll x, y, z; } point3;",
            "point3 operator+(const point3 &p1, const point3 &p2) {",
            "	return (point3 {p1.x + p2.x, p1.y + p2.y, p1.z + p2.z});",
            "}",
            "point3 operator-(const point3 &p1, const point3 &p2) {",
            "	return (point3 {p1.x - p2.x, p1.y - p2.y, p1.z - p2.z});",
            "}"
            ]
    },

    "law_of_cosinus":{
        "prefix": "pcr_law_of_cosinus",
        "body": [
            "//returns angle on the opposite side of o for triangle l,o,r",
            "double lawOfCosinus(double l, double r, double o) {",
            "    return acos((l*l+r*r-o*o) / (2*l*r));",
            "}"
            ]
    },

    "convex_hull":{
        "prefix": "pcr_convex_hull",
        "body": [
            "//returns in ccw order",
            "//for colinear points in hull remove '='",
            "//first != last",
            "vector<point2> convexHull(vector<point2> &points) {",
            "	int k = 0, n = points.size();",
            "	vector<point2> hull(n+2);",
            "	sort(points.begin(), points.end(), [](const point2 &p1, const point2 &p2) {",
            "		return p1.x < p2.x || (p1.x == p2.x && p1.y < p2.y);",
            "	});",
            "	",
            "	//lower hull",
            "	for(int i = 0; i < n; i++) {",
            "		while(k >= 2 && ccw(hull[k-2], hull[k-1], points[i]) <= 0) k--;",
            "		hull[k++] = points[i];",
            "	}",
            "	",
            "	//upper hull",
            "	for(int i = n - 2, t = k + 1; i >= 0; i--) {",
            "		while(k >= t && ccw(hull[k-2], hull[k-1], points[i]) <= 0) k--;",
            "		hull[k++] = points[i];",
            "	}",
            "	",
            "	hull.resize(max(0, k - 1));",
            "	return hull;",
            "}"
            ]
    },

    "dijkstra":{
        "prefix": "pcr_dijkstra",
        "body": [
            "//O(|E|*log|V|)",
            "ll dijkstra(vector<vector<pii>> &graph, int start, int end) {",
            "	vector<ll> dist = vector<ll>(graph.size(), MAX_LL);",
            "	dist[0] = 0;",
            "	priority_queue<pll, vector<pll>, greater<pll>> pq;",
            "	pq.push((pll){0, start});",
            "	",
            "	while(!pq.empty()) {",
            "		pll node = pq.top(); pq.pop();",
            "		",
            "		if(node.first > dist[node.second]) continue;",
            "		if(node.second == end) break; //remove for dist to all",
            "		",
            "		for(pii &edge: graph[node.second]) {",
            "			if(dist[node.second] + edge.second < dist[edge.first]) {",
            "				dist[edge.first] = dist[node.second] + edge.second;",
            "				// parent[edge.first] = node.second;",
            "				pq.push((pll){dist[edge.first], edge.first});",
            "			}",
            "		}",
            "	}",
            "	",
            "	return dist[end];",
            "}"
            ]
    },

    "lca":{
        "prefix": "pcr_lca",
        "body": [
            "int LCA_MAX; //#nodes",
            "vector<int>vis, first, mapping;",
            "int lca_time, map_idx;",
            "vector<vector<int>> graph;",
            "",
            "void dfs(int u) {",
            "	int mi = map_idx++;",
            "	",
            "	mapping[mi] = u;",
            "	first[u] = lca_time;",
            "	vis[lca_time++] = mi;",
            "	",
            "	for(int v: graph[u]) {",
            "		dfs(v);",
            "		vis[lca_time++] = mi;",
            "	}",
            "}",
            "",
            "void init(int root) {",
            "	first = vector<int>(LCA_MAX, -1);",
            "	mapping = vector<int>(LCA_MAX, -1);",
            "	vis = vector<int>(2 * LCA_MAX, -1);",
            "	lca_time = 0, map_idx = 0;",
            "	",
            "	dfs(root);",
            "	initSeg(vis);",
            "}",
            "",
            "int lca(int u, int v) {",
            "	int i1 = min(first[u], first[v]);",
            "	int i2 = max(first[u], first[v]);",
            "	return mapping[getMin(i1, i2 + 1)];",
            "}"
            ]
    },

    "max_flow_capped":{
        "prefix": "pcr_max_flow_capped",
        "body": [
            "typedef struct {",
            "	int dest, idx; ll weight;",
            "} edge;",
            "",
            "int N;",
            "ll flowCap = MAX_LL, flowCounter = 0;",
            "vector<vector<edge>> graph;",
            "vector<ll> visited;",
            "",
            "bool dfs(int s, int t) {",
            "	visited[s] = flowCounter;",
            "	",
            "	if(s == t) return true;",
            "	",
            "	for(edge &e: graph[s]) {",
            "		if(visited[e.dest] < flowCounter && e.weight >= flowCap && dfs(e.dest, t)) {",
            "			e.weight -= flowCap;",
            "			graph[e.dest][e.idx].weight += flowCap;",
            "			return true;",
            "		}",
            "	}",
            "	",
            "	return false;",
            "}",
            "",
            "//returns the max flow between s and t in graph",
            "//O(|E|^2 * log(C))",
            "ll maxFlow(int s, int t) {",
            "	ll flow = 0;",
            "	flowCap = MAX_LL, flowCounter = 0;",
            "	visited.assign(N, flowCounter);",
            "	while(flowCap) {",
            "		while(flowCounter++, dfs(s, t)) {",
            "			flow += flowCap;",
            "		}",
            "		flowCap >>= 1;",
            "	}",
            "	",
            "	return flow;",
            "}"
            ]
    },

    "binomial_coefficients":{
        "prefix": "pcr_binomial_coefficients",
        "body": [
            "//O(n*log(n))    more specific: O(min(n-k, k) * log(n))",
            "ll binFac(int n, int k) {",
            "	k = max(k, n-k);",
            "	ll res = 1, nn = k;",
            "	while(nn++ < n) {",
            "		ll d = nn - k, f = nn, d1 = gcd(f, d);",
            "		res = (res / (d/d1)) * (f / d1);",
            "	}",
            "	return res;",
            "}"
            ]
    },

    "smallest_prime_divisor":{
        "prefix": "pcr_smallest_prime_divisor",
        "body": [
            "//stores the smallest prime divisor for each i <= PRIME_MAX <= 10^8",
            "const int PRIME_MAX = 100000;",
            "int sd[PRIME_MAX+1];",
            "",
            "//precalculates the smallest primefactor for each i <= PRIME_MAX",
            "//O(n*log(log(n)))",
            "void pre() {",
            "	sd[0] = sd[1] = 0;",
            "	for(int i = 2; i <= PRIME_MAX; i++) sd[i] = (i % 2 == 0 ? 2 : i);",
            "	",
            "	for(ll i = 3; i * i <= PRIME_MAX; i+=2) {",
            "		if(sd[i] == i) {",
            "			for(ll n = i*i; n <= PRIME_MAX; n += (i<<1)) {",
            "				if(sd[n] == n) sd[n] = i;",
            "			}",
            "		}",
            "	}",
            "}",
            "",
            "//factorizes n (n <= PRIME_MAX!)",
            "//O(log(n))",
            "vector<int> factorize(int n) {",
            "	vector<int> res;",
            "	while(n > 1) {",
            "		res.pb(sd[n]);",
            "		n /= sd[n];",
            "	}",
            "	return res;",
            "}"
            ]
    },

    "gcd":{
        "prefix": "pcr_gcd",
        "body": [
            "//a >= b",
            "ll gcd(ll a, ll b) {",
            "	return b == 0 ? a : gcd(b, a % b);",
            "}"
            ]
    },

    "miller_rabin":{
        "prefix": "pcr_miller_rabin",
        "body": [
            "//theoretical: n < 318,665,857,834,031,151,167,461 ( > 10^23)",
            "//but: n ~<= 10^18 (because of MAX(ll))",
            "//O(37*logn^2)",
            "bool isPrime(ll n) {",
            "	if(n == 2) return true;",
            "	if(n < 2 || n % 2 == 0) return false;",
            "	ll d=n-1,j=0;",
            "	while(d % 2 == 0) d >>= 1, j++;",
            "	for(int a = 2; a <= min((ll)37, n-1); a++) {",
            "		ll v = pow_mod(a, d, n);",
            "		if(v == 1 || v == n-1) continue;",
            "		for(int i = 1;  i <= j; i++) {",
            "			v = mult_mod(v, v, n);",
            "			if(v == n-1 || v <= 1) break;",
            "		}",
            "		",
            "		if(v != n-1) return false;",
            "	}",
            "	return true;",
            "}"
            ]
    },

    "lin_representable":{
        "prefix": "pcr_lin_representable",
        "body": [
            "//checks whether there exists an int vector a >= 0 s.t. a'*g=k or not",
            "//O((|g|*min(g)) * log(min(g)))",
            "bool linRepresentable(vector<int> g, ll k) {",
            "",
            "	//get minimal element for smallest graph",
            "	int m = g[0];",
            "	for(int gi: g) m = min(m, gi);",
            "	",
            "	//get all moves O(|g|+min(g))",
            "	vector<pii> moves = vector<pii>();",
            "	vector<int> tmp(m, MAX_INT);",
            "	for(int gi: g) tmp[gi % m] = min(tmp[gi % m], gi);",
            "	for(int i = 1; i < m; i++) {",
            "		if(tmp[i] < MAX_INT) moves.pb((pii){i, tmp[i]});",
            "	}",
            "	",
            "	//create graph",
            "	vector<vector<pii>> graph = vector<vector<pii>>(m, vector<pii>());",
            "	for(int i = 0; i < m; i++) {",
            "		for(pii &move: moves) {",
            "			graph[i].pb(((pii){(i+move.first) % m, move.second}));",
            "		}",
            "	}",
            "	",
            "	return dijkstra(graph, 0, (int)(k % m)) <= k;",
            "}"
            ]
    }
}